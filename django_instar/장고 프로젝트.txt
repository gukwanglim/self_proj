장고 시작하기 - django-admin startproject config

<-- 시작 이유 -->
0. 장고로 인스타그램 클론 코딩하기. https://cholol.tistory.com/545?category=739855
 - 클론 코딩을 하는 이유 : 이전 프로젝트(쇼핑몰 만들기)에서 데이터베이스 사용에 아쉬움을 느끼고.


<-- 프론트엔드 -->
1. html 연동 : templates 파일 생성 -> 그 안에 프로젝트 파일과 같은 이름의 파일 생성(config) -> 그 안에 main.html파일 생성
  -> 이때 vs code는 templates 파일을 자동으로 설정하는 것이 아니므로 settings.py의 templates 부분에 BASE_DIR / 'templates' 작성
  -> main.html 파일을 보여주기 위해 프로젝트 파일 안에 views.py 생성 -> rest_framework를 사용하기 위해 djangorestframework을 install
  -> djangorestframework을 설치하면 설치했다고 알려주기 위해 settings.py에서 INSTALLED_APPS 부분에 추가 
  -> main.html을 보여줄 class Main(APIView)를 작성 -> 이것들을 연결해주기 위해 urls.py 파일에서 Main을 import 하고, urlpatterns = [path('', Main.as_view())] 작성
  -> 터미널에서 python manage.py runserver 실행

2. css 파일 연동 (정적(static) 파일 기능) : settings.py의 STATIC_URL = '/static/' 아래에 STATICFILES_DIRS = [BASE_DIR / 'static] 작성
  -> manage.py가 있는 위치에 static 파일 생성 -> static 안에 css 파일 생성 후, style.css 생성 -> css를 사용하는 파일의 제일 위에 {{% load static %}} -> <head> 부분에 <link rel="stylesheet" href="{% static 'css/style.css' %}">


<-- 백엔드 -->
Django는 MTV 구조로 되어있습니다. MTV란 모델, 템플릿, 뷰 3가지를 합쳐서 부르는 말인데요, 우리가 만드는 웹 서비스를 이 3가지로 분리할 수 있습니다. 

먼저, 모델은 데이터의 형태를 말합니다. django에서 모델은 class로 표기합니다. class는 모델보다 상위개념으로 객체를 뜻.
ex) 피드 - { 본문, 사진, 프로필사진, 아이디, 좋아요 수 }
    추천인 - { 프로필사진, 아이디, 추천 이유 }
class 모델명(models.Model): 이 기본형.

장고는 APP(앱)단위로 소스를 관리할 수 있습니다.(모델 관리)

1. content라는 앱을 하나 만들기 : python manage.py startapp <앱이름>(예를 들자면 content) -> content라는 파일이 만들어지고 그 안에 여러 .py 파일이 생성 
  -> content를 생성했으면 settings.py에서 INSTALLED_APPS에 content 추가 -> models.py에 모델 추가 -> 데이터베이스 만들기

2. 데이터베이스 만들기 (장고에서 sqlite 대신 mariadb 사용하기. https://velog.io/@_koiil/Django-MariaDB-%EC%82%AC%EC%9A%A9, https://youngwonhan-family.tistory.com/36)
 - 장고에서 mariaDB를 사용하는 것도 오라클처럼 config/setting.py에서 데이터베이스를 변경해주면 된다.
 - 장고에 default로 들어가는 sqlite 대신 mariadb를 사용하는 이유 : sqlite는 데이터베이스 중에서 용량이 작은 편이며, 이전 프로젝트에서 사용하였을 때, 동일한 작업을 처리하는 것도 수많은 방법을 사용하여 정보에 혼선이 많아
   개발자가 되어서도 사용하기 편한 db를 찾아서 사용.

  2-1. 데이터베이스 만들기(Mariadb) : settings.py에서 DATABASES 부분 따로 설정 -> settings.py에서 INSTALLED_APPS 부분 아래에 TIME_ZONE = 'Asia/Seoul'와 USE_TZ = True를 사용하여 시간 설정 -> models.py에 테이블을 만들었는지 확인
      -> python manage.py makemigrations 실행으로 models.py에서 생성된 모델을 마이그레이션 객체로 변환 -> 수행결과에 보면 0001_initial.py가 생성된 것을 확인 -> python manage.py migrate으로 데이터베이스에 모델을 배포
      -> 데이터베이스를 확인해보면 여러 django 기본 테이블 사이에 내가 만든 테이블(여기서는 content_feed)을 확인할 수 있음 -> content_feed를 보면 작성하지 않은 id 필드가 프라이머리키로 들어가 있는 것을 확인

3. models.py에서 만든 DB에서 main.html로 데이터를 이동(views.py(content 안에 있는 것이 아닌 config(처음 만든 프로젝트 파일)에 있는 것)) : views.py에서 content.models에 있는 Feed 불러오기 
  -> 여기서 dict 형태로 넣으면 key가 feed_list이고, value가 테이블에 작성한 데이터. (여기서 테이블에 한글이 안 들어갈 경우 ALTER TABLE 테이블명 CONVERT TO CHARSET UTF8; 쿼리를 사용)
  -> sqlite에서와 마찬가지로 [{}, {}, {}] 이런 형식으로 들어가있음. 즉, feed_list[0].image 형식으로 불러오기 가능